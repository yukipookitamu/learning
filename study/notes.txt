
1. Introduction to Algorithm

  What is an algorithm?

    An algorithm is a step by step procedure for solving a computational problem

  What about a program?

    It is synonymous with an algorithm.

  Then what is the difference between the two?

  Program vs Algorithm:

    - First we design. In order to help design, we break it down into simpler
      components, getting with familiar with how the program is going to work.
      This simpler component is the algorithm.

    - Algorithm: Design, Program: Implementation

    Algorithm:
    - Design
    - Domain Knowledge; the problem's knowledge
      - Suppose you are developing a program for a hospital that uses medical
        accounts, you would use a person working in the field
    - Any language can be used, must be understandable by those using it
    - Hardware or Software; we don't really bother
    - Analyze (Efficiency and such)

    Program:
    - Implementation
    - Programmer
      - A programmer simply implements the wishes of the medical worker.
    - Only programming language (C++, Java, Python, etc.)
    - Dependent on Hardware and Software (For Linux? Windows?)
    - Testing of the program.

1.1 Priori Analysis and Posteriori Testing

    Priori Analysis: Anakyze the algorithm, how is it working? Time and Space
    complexity?

    Posteriori Analysis: Run it, how long is it taking? Watch time and byte usage

    Priori Analysis:
    - Algorithm
    - Independent of language and hardware
    - Time and space function

    Posteriori:
    - Program
    - Dependent on language and hardware
    - Watch the actual output time and bytes

1.2 Characteristics of algorithm

  Characteristics of an Algorithm:
  - Can take zero or more (n) inputs
  - An algorithm must generate at least one output, otherwise it serves no purpose
  - Definiteness: it should have a single or exact meaning. If we cannot solve it,
    then our computer cannot solve it. It's like using root of -1, it is imaginary
    and cannot be used in an algorithm
  - Finiteness: an algorithm must terminate at some point.
  - Effectiveness: don't write unnecessary statements.

1.3 How to Write and Analyze an Algorithm

  How to write an algorithm:

  - We don't bother with the proper notation (think pseudo code). You can use any
    syntax as long as the user can understand the processes occurring.

  algorithm swap(a,b)

  begin

    temp = a; a is stored in temp
    a = b; b is stored in a
    b = temp; temp is stored in b

  end

  How to analyze a program:
  - Time: is it quick and snappy? Time consuming? Some programs must perform
    faster so these algorithms are important.
    - We get a time function to solve for this
  - Space: we need to know how much memory space it will consume
  - Network Consumption: how is data transfer done?
  - Power Consumption
  - CPU Registers: how many CPU registers is it consuming?

  These are the main criteria in which algorithms are analyzed


  Example: How much time does it take?

  Each statement takes one unit of time

  algorithm swap(a,b)

  begin                                        units of time      space

    temp = a; a is stored in temp                          1          1
    a = b; b is stored in a                                1          1
    b = temp; temp is stored in b                          1          1
                                                           _          _
  end                                               f(n) = 3    s(n) = 3
                                                        O(1)         O(1)

  x = 5 * a + 6 * b                                        1

  For the above example, it is a single statement but each operation
  can take a certain amount of time.

1.4 Frequency Count Level

(1.5.1-1.5.2 Will be added later)

1.5.3 Time Complexity of if and while

  i = 0                                                    1
  while (i < n)                                          n+1

    statement;                                             n
    i++                                                    n
                                                           _
                                               f(n) = 3n + 2
                                                        O(n)

1.6 Types of Time Functions

  O(1): constant
  - No matter the number in the time function, it will always simplify
    to a constant O(1)

  O(log n): logarithmic

  O(n): linear
  - No matter the number before n, we only care about the degree

  O(n^2): quadratic

  O(n^3): cubic

  O(2^n): exponential
